[
["index.html", "QMGT-4750 Collecting and Analyzing Data Preface", " QMGT-4750 Collecting and Analyzing Data Vishal Balaji 2020-07-06 Preface This book was written for the Collecting and Analyzing Data class (QMGT-4750/QMGT-677) taught in Millsaps College, Jackson, Mississippi, USA. I took this class as a freshman in the 2020 spring semester and I am writing this book as a way to improve my R knowledge and keep myself busy during summer break and the COVID-19 global pandemic. This book was written using R Markdown (Allaire et al. 2020) and bookdown package (Xie 2020). Bookdown is an extremely versatile package and it has been really fun learning process. Bookdown: Authoring Books and Technical Documents with R Markdown (Xie 2016) has been my guide for the bookdown package. I recommend anyone who is interested in this package to check it out. References "],
["introduction.html", "Introduction Prerequisites What to expect? Structure of the book", " Introduction Prerequisites There are no prerequisites for this class and is especially friendly for non-programmers! So if you have no programming experience at all, worry not! We’ll make sure to make the information easy to follow along, or at the least make sure you know where to look for an answer when you are stuck. What to expect? All the information for this course is taken from the book R for Data Science (Wickham and Grolemund 2017). Structure of the book Prerequisites Intro Base R Project 1 Data Viz Project 2 Exploring Project 3 wrangling Project 4 Final Project References "],
["baseR.html", "Chapter 1 Base R 1.1 Comments 1.2 Working Directory 1.3 Expressions 1.4 Data Objects 1.5 R’s Mathematical Operators", " Chapter 1 Base R Before you start, a few important reminders: R is case-sensitive. That is, Statistics is not the same as statistics. Spelling matters. If you misspell something, R doesn’t know what you’re asking for. R doesn’t understand social media shortcuts. 1.1 Comments The comment character in R is #. Each commented line must be preceded by a # symbol and anything following a # is considered a comment. There are no block comments in R. Comments are not evaluated when you run your code. Two important uses of comments: Documenting your syntax. Excluding problematic lines of code when debugging When debugging, commenting out parts of your code, rather than deleting them, will save you tons of time. The shortcut for commenting/uncommenting a line is ctrl+shift+c or cmd+shift+c # This is a comment ## This is also a comment ######################### This too is a comment # This is an example of a # multiline comment 1.2 Working Directory Every R session is associated with a ‘working directory’. The working directory is the directory that R will use to read or write data objects to or from disk. You must specify the directory where your files are located. Use setwd() to do this. Note: Remember to change all \\ to /. Also, remember to enclose in quotes. You can also go to Session -&gt; Set Working Directory -&gt; Choose directory… to set the working directory. But it is recommended to use setwd() as you leave a written record of which directory you used. You can check to see what your current working directory is using getwd() setwd(&quot;drive:/parent-folder/child-folder/working-directory-folder&quot;) setwd(&quot;H:/Personal Folders - FacStaff/thompkl1/stats&quot;) getwd() ## [1] &quot;H:/Personal Folders - FacStaff/thompkl1/stats&quot; Above is the output of getwd() and this output is logged in the console. 1.3 Expressions The simplest expressions are constants. 4 ## [1] 4 &quot;cat&quot; ## [1] &quot;cat&quot; 10:20 ## [1] 10 11 12 13 14 15 16 17 18 19 20 Expressions may include operators. You will learn about the math operators in more detail in the operators section 1.5. 3 + 2 ## [1] 5 3 - 2 ## [1] 1 3 * 2 ## [1] 6 3 / 2 ## [1] 1.5 3^2 ## [1] 9 The : is an operator. 2:6 ## [1] 2 3 4 5 6 Anything that happens in R is a function. Operators are functions. These are some of the operators in R: + - * / ^ : 1.4 Data Objects Expressions can be assigned to objects by using the assignment operator and specifying a name for the object. Commands in R are made of two parts: Object and Functions. Objects and functions are separated by the ‘assignment’ operator &lt;-. What is to the left of &lt;- is “created from” whatever is on the right. Commands take the form: Object &lt;- Function To do anything useful in R, we need to create objects to hold the data. x1 &lt;- 4 x2 &lt;- 4 + 5 x3 &lt;- &quot;cat&quot; x4 &lt;- 2:6 All the objects created can be viewed in the environment pane of the RStudio IDE. 1.4.1 Naming rules Object names must begin with a letter my1X &lt;- pi my1X ## [1] 3.141593 1X &lt;- pi # Uh-oh :( ## Error: &lt;text&gt;:1:2: unexpected symbol ## 1: 1X ## ^ 1.4.2 Assignment All of these are different methods of assignment. But it is recommended to follow the first method of assignment as it makes the code readable and easy to edit. # The good y &lt;- 7 # The bad x = 33.33 # The ugly &quot;Bob&quot; -&gt; z Expressions can also include names of existing data objects. w &lt;- y w ## [1] 7 w &lt;- y + 4 w ## [1] 11 1.4.3 print() Everything that happens in R is a function. The “default” function is print(). The default location of print() is the screen. Evaluating an object name without assignment passes the result to the default print() function, so we see the value on the screen. You might have noticed this done in previous examples. y ## [1] 7 x ## [1] 33.33 z ## [1] &quot;Bob&quot; 1.4.4 str(), View(), and summary() Use str(), View(), and summary() functions to explore data objects. str(x1) ## num 4 summary(x2) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 9 9 9 9 9 9 summary(x3) ## Length Class Mode ## 1 character character The View() function invokes a spreadsheet-style data viewer. Note the capital V. View(x3) 1.4.5 typeof(), class(), and help() Use typeof() and class() to learn more about objects typeof(x2) ## [1] &quot;double&quot; class(x2) ## [1] &quot;numeric&quot; typeof(x3) ## [1] &quot;character&quot; class(x3) ## [1] &quot;character&quot; typeof(str) ## [1] &quot;closure&quot; class(View) ## [1] &quot;function&quot; The help() function shows useful information about the function that is passed in the help pane. In this case it shows information about the typeof() function. help(typeof) 1.4.6 Built-in objects R has some built-in data objects letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; ## [25] &quot;y&quot; &quot;z&quot; pi ## [1] 3.141593 1.5 R’s Mathematical Operators These are the initial values of the variables x and y. x ## [1] 33.33 y ## [1] 7 1.5.1 Addition, Subtraction, Multiplication and Division # Addition y + x ## [1] 40.33 # Subtraction y - x ## [1] -26.33 # Multiplication y * x ## [1] 233.31 # Division y / x ## [1] 0.210021 1.5.2 Powers and roots x^n will raise x to the nth power 3^2 ## [1] 9 y^2 # square y ## [1] 49 y^3 # cube y ## [1] 343 sqrt(y) # function that returns square root of its argument ## [1] 2.645751 y^.5 ## [1] 2.645751 y^(1/2) ## [1] 2.645751 For nth roots with n &gt; 2, use fractional exponents y^(1/3) # cube root of y ## [1] 1.912931 y^(1/4) # quartic root of y ## [1] 1.626577 1.5.3 Logarithms and anti-logs log(y) # function for natural logarithm ## [1] 1.94591 log10(y) # function for base 10 log ## [1] 0.845098 log2(y) # function for base 2 log ## [1] 2.807355 1.5.4 Other operators Exponential function: exp(x) # function to exponentiate its argument ## [1] 2.985624e+14 Absolute value: abs(y) # returns the absolute value of the argument ## [1] 7 Modulo operator: x %% y # remainder after dividing x by y ## [1] 5.33 x/y ## [1] 4.761429 Integer arithmetic: 7 %/% 3 # drops any decimal value ## [1] 2 7 / 3 ## [1] 2.333333 "],
["references.html", "References", " References Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and Richard Iannone. 2020. Rmarkdown: Dynamic Documents for R. https://CRAN.R-project.org/package=rmarkdown. Wickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st ed. Paperback; O’Reilly Media. http://r4ds.had.co.nz/. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/bookdown. ———. 2020. Bookdown: Authoring Books and Technical Documents with R Markdown. https://CRAN.R-project.org/package=bookdown. "]
]
